{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleChange","event","name","target","value","setState","handleSubmit","e","preventDefault","row","document","querySelector","insertRow","state","rowCount","cell1","insertCell","cell2","cell3","cell4","cell5","cell6","appendChild","createTextNode","firstname","middlename","lastname","course","gender","phone","className","onSubmit","this","type","onChange","size","placeholder","required","class","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5adce2b.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport \"./Form.css\"\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            firstname:\"\",\n            middlename:\"\",\n            lastname:\"\",\n            course:\"\",\n            gender:\"\",\n            phone:\"\",\n            rowCount:1\n         }\n    }\n\n    handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n        this.setState({\n            [name]:value\n        })   \n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        var selector = document.querySelector(\".table-layout table\")\n        var row = selector.insertRow(this.state.rowCount)\n        var cell1 = row.insertCell(0)\n        var cell2 = row.insertCell(1)\n        var cell3 = row.insertCell(2)\n        var cell4 = row.insertCell(3)\n        var cell5 = row.insertCell(4)\n        var cell6 = row.insertCell(5)\n        cell1.appendChild(document.createTextNode(this.state.firstname))\n        cell2.appendChild(document.createTextNode(this.state.middlename))\n        cell3.appendChild(document.createTextNode(this.state.lastname))\n        cell4.appendChild(document.createTextNode(this.state.course))\n        cell5.appendChild(document.createTextNode(this.state.gender))\n        cell6.appendChild(document.createTextNode(this.state.phone))\n        this.setState({rowCount:this.state.rowCount+1})\n    }\n\n    render() { \n        return ( \n            <div className=\"form-div\">\n                <center>  <h1> Student Registeration Form</h1> </center>\n                <form onSubmit={this.handleSubmit}>\n                    <label> Firstname: </label>         \n                    <input type=\"text\" value={this.state.firstname} onChange={this.handleChange} name=\"firstname\" size=\"15\" placeholder=\"First Name\" required/> \n                    <label> Middlename: </label>     \n                    <input type=\"text\" value={this.state.middlename} onChange={this.handleChange} name=\"middlename\" size=\"15\" placeholder=\"Middle Name\" required/> \n                    <label> Lastname: </label>         \n                    <input type=\"text\" value={this.state.lastname} onChange={this.handleChange} name=\"lastname\" size=\"15\" placeholder=\"Last Name\" required/>\n                    <label>   \n                    Course :  \n                    </label>   \n                    <select required name=\"course\" onChange={this.handleChange} value={this.state.course}>  \n                    <option value=\"Course\">Course</option>  \n                    <option value=\"BCA\">BCA</option>  \n                    <option value=\"BBA\">BBA</option>  \n                    <option value=\"B.Tech\">B.Tech</option>  \n                    <option value=\"MBA\">MBA</option>  \n                    <option value=\"MCA\">MCA</option>  \n                    <option value=\"M.Tech\">M.Tech</option>  \n                    </select>  \n                    <label>   \n                    Gender :  \n                    </label> \n                    <div className=\"radio-grp\">\n                        <input type=\"radio\" onChange={this.handleChange} value=\"male\" name=\"gender\" required/> Male \n                        <input type=\"radio\" onChange={this.handleChange} value=\"female\"  name=\"gender\" required/> Female\n                        <input type=\"radio\" onChange={this.handleChange} value=\"other\"  name=\"gender\" required/> Other  \n                    </div>\n                    <label>   \n                    Phone :  \n                    </label>  \n                    <input type=\"text\" onChange={this.handleChange} name=\"phone\" value={this.state.phone} size=\"10\" required/> \n                    <button type=\"submit\" class=\"registerbtn\">Register</button>\n                </form>\n                <div className=\"table-layout\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <th>First Name</th>\n                                <th>Middle Name</th>\n                                <th>Last Name</th>\n                                <th>Course</th>\n                                <th>Gender</th>\n                                <th>Phone</th>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n         );\n    }\n}\n \nexport default Form;","import React from 'react';\nimport Form from \"./components/Form\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}